// Copyright 2020 The Terasology Foundation
// SPDX-License-Identifier: Apache-2.0
package org.terasology.blockdetector.internal;

import com.google.common.collect.Sets;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.terasology.blockdetector.systems.BlockDetectorSystem;
import org.terasology.blockdetector.utilities.DetectorData;
import org.terasology.blockdetector.utilities.LinearAudioDetectorImpl;
import org.terasology.engine.audio.AudioManager;
import org.terasology.engine.entitySystem.systems.BaseComponentSystem;
import org.terasology.engine.entitySystem.systems.RegisterSystem;
import org.terasology.engine.math.Region3i;
import org.terasology.engine.registry.In;
import org.terasology.math.geom.Vector3i;

/**
 * A festive implementation example!
 * <p>
 * Designed to work with internal eggs generated by ShatteredPlanes.
 *
 * @see <a href="https://github.com/Terasology/ShatteredPlanes">ShatteredPlanes source</a>
 */

// Step 1: Register a system extending BaseComponentSystem.
@RegisterSystem
public class EasterEggDetectorSystem extends BaseComponentSystem {
    private static final Logger logger = LoggerFactory.getLogger(EasterEggDetectorSystem.class);

    // Step 2: Inject all the necessary in-game systems.
    // Make sure to inject the blockDetectorSystem!
    @In
    private AudioManager audioManager;

    @In
    private BlockDetectorSystem blockDetectorSystem;

    private DetectorData data;

    // Step 3: Create detector bindings in the initialise() method and add them to the blockDetectorSystem.
    @Override
    public void initialise() {
        Region3i range = Region3i.createFromMinMax(new Vector3i(-40, -40, -40), new Vector3i(40, 40, 40));
        data = new LinearAudioDetectorImpl("BlockDetector:easterEggDetector", Sets.newHashSet("CoreAssets:Snow"),
                range, audioManager, "BlockDetector:ScannerBeep", 200, 2000);

        blockDetectorSystem.addDetector(data);
    }

    // Step 4: Gracefully clean up the bindings on shutdown.
    @Override
    public void shutdown() {
        blockDetectorSystem.removeDetector(data.getDetectorUri());
    }
}
